name: Maestro UI Tests
on: [pull_request]

jobs:
  maestro-tests:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout the code
        uses: actions/checkout@v4
        
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'
          
      - name: Cache Gradle packages
        uses: actions/cache@v3
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-
            
      - name: Make gradlew executable
        run: chmod +x ./gradlew
        
      - name: Set up Android SDK
        uses: android-actions/setup-android@v3
        
      - name: Install Maestro
        run: |
          curl -Ls "https://get.maestro.mobile.dev" | bash
          echo "$HOME/.maestro/bin" >> $GITHUB_PATH
          
      - name: Install system image and create AVD
        run: |
          # Set correct AVD home directory
          export ANDROID_AVD_HOME="$HOME/.config/.android/avd"
          export ANDROID_SDK_HOME="$HOME/.config/.android"
          
          echo "Installing system image..."
          yes | sdkmanager "system-images;android-29;google_apis;arm64-v8a"
          
          echo "Creating AVD..."
          echo "no" | avdmanager create avd -n test_emulator -k "system-images;android-29;google_apis;arm64-v8a" --force
          
          echo "Verifying AVD creation..."
          avdmanager list avd
          
      - name: Start emulator
        run: |
          echo "Starting emulator..."
          
          # Set correct AVD home directory
          export ANDROID_AVD_HOME="$HOME/.config/.android/avd"
          export ANDROID_SDK_HOME="$HOME/.config/.android"
          
          # List available AVDs for debugging
          echo "Available AVDs:"
          avdmanager list avd
          
          # Start emulator with ARM emulation (no hardware acceleration needed)
          $ANDROID_HOME/emulator/emulator -avd test_emulator -no-window -no-audio -no-boot-anim -gpu swiftshader_indirect -memory 2048 -cores 2 -no-snapshot -no-metrics &
          
          echo "Waiting for emulator to boot..."
          adb wait-for-device
          adb shell 'while [[ -z $(getprop sys.boot_completed) ]]; do sleep 1; done'
          echo "‚úÖ Emulator is ready"
          
      - name: Build and install app
        run: |
          ./gradlew assembleDebug
          adb install app/build/outputs/apk/debug/app-debug.apk
          
      - name: Run Maestro Tests
        run: |
          # Make the CI test script executable
          chmod +x ./scripts/run-maestro-tests-ci.sh
          
          # Run the Maestro tests using the CI-optimized script
          echo "üß™ Running Maestro tests using CI script..."
          ./scripts/run-maestro-tests-ci.sh
        env:
          GITHUB_USERNAME: ${{ github.actor }}
          GITHUB_PASSWORD: ${{ secrets.GITHUB_TOKEN }}
            
      - name: Stop emulator
        if: always()
        run: |
          adb emu kill
          
      - name: Upload test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: maestro-test-results
          path: |
            maestro-tests/results/
            
      - name: Comment test results on PR
        if: failure() && github.event_name == 'pull_request'
        uses: actions/github-script@v6
        with:
          script: |
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: '‚ùå **Maestro UI Tests Failed**\n\nSome UI tests failed. Please check the test results in the workflow logs.'
            })